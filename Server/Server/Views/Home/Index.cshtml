@{
    ViewData["Title"] = "Home Page";
    Layout = null;
}

<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <title>Iot HUB</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.9.1/font/bootstrap-icons.css">
    <link href="~/lib/bootstrap/dist/css/bootstrap.min.css" rel="stylesheet" />

    <style>
        body {
            width: 100%;
            height: 100%;
            margin: 0px;
            padding: 0px;
        }

        .centered {
            margin: auto;
            position: absolute;
            top: 100px;
            left: 0;
            bottom: 0;
            right: 0;
        }

        button {
            width: 300px;
            height: 100px;
            margin: 10px;
        }
    </style>
</head>
<body>
    @*    <button id="sendButton" type="submit" style="width: 300px;height: 300px">LED</button>*@
    <div class="centered" style="color: #383838; font-family: 'Segoe UI';">
        <center>
            @*                <i class="bi bi-plug" style="font-size: 300px; position: relative"></i>
            <i class="bi bi-heart-pulse" style="font-size: 50px; position: relative; left: -100px"></i>*@

            <div id="info" class="alert alert-success" role="alert" style="max-width: 600px">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
                <h4 id="header" class="alert-heading">Waiting for device...</h4>
                <p id="detail">Please connect the device to the power supply</p>
            </div>
            <div id="buttons" class="row">
            </div>
        </center>
    </div>
    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    <script>
        var socket;
        var sendButton = document.getElementById("sendButton");
        var info = document.getElementById("info");
        var header = document.getElementById("header");
        var detail = document.getElementById("detail");
        var buttons = document.getElementById("buttons");
        var scheme = document.location.protocol === "https:" ? "wss" : "ws";
        var port = document.location.port ? (":" + document.location.port) : "";
        socket = new WebSocket(scheme + "://" + document.location.hostname + port + "/ws");

        socket.onopen = function (event) {
            updateState();
        };
        socket.onclose = function (event) {
            updateState();
        };

        socket.onerror = updateState;
        socket.onmessage = function (event) {
            console.log(event.data);
            const json = JSON.parse(event.data);

            if (json.Command == "REGISTER_NODE_MCU") {
                header.innerHTML = "Receiving contract...";
                detail.innerHTML = '';
            }
            else if (json.Command == "GET_GPIO_LIST_DONE") {
                detail.innerHTML = '';

                var str_array = json.Args.split(';');

                var newButtons = '';
                for (var i = 0; i < str_array.length; i++) {
                    if (str_array[i] != '') {
                        newButtons += '<div class="col-12-lg"><button onClick="buttonClickSwith(' + str_array[i] + ')" id="' + str_array[i] + '" class="btn btn-secondary">' + str_array[i] + '</button></div>';
                    }
                }
                newButtons += '<div class="col-12-lg"><button onClick="buttonClickOn()" id="On" class="btn btn-success">ON</button></div>';
                newButtons += '<div class="col-12-lg"><button onClick="buttonClickOff()" id="Off" class="btn btn-danger">OFF</button></div>';

                buttons.innerHTML = newButtons;
                info.hidden = true;
            }
            else if (json.Command == "SWITCH_LED_DONE") {
                if (json.Args == "0:1") {
                    $("#led").removeClass("btn-secondary");
                    $("#led").addClass("btn-success");
                }
                else {
                    $("#led").addClass("btn-secondary");
                    $("#led").removeClass("btn-success");
                }
            }
            else if (json.Command == "SWITCH_GPIO_DONE") {
                var id = json.Args.split(':')[0];
                if (json.Args.split(':')[1] == 1) {
                    $('#'+id).removeClass("btn-secondary");
                    $('#'+id).addClass("btn-primary");
                }
                else {
                     $('#'+id).addClass("btn-secondary");
                    $('#' + id).removeClass("btn-primary");
                }
            }
            else if (json.Command == "ON_GPIO") {
                var id = json.Args.split(':')[0];
                if (json.Args.split(':')[1] == 1) {
                    $('#' + id).removeClass("btn-secondary");
                    $('#' + id).addClass("btn-success");
                }
                else {
                    $('#' + id).addClass("btn-secondary");
                    $('#' + id).removeClass("btn-success");
                }
            }
            else if (json.Command == "OFF_GPIO") {
                var id = json.Args.split(':')[0];
                if (json.Args.split(':')[1] == 1) {
                    $('#' + id).removeClass("btn-secondary");
                    $('#' + id).addClass("btn-success");
                }
                else {
                    $('#' + id).addClass("btn-secondary");
                    $('#' + id).removeClass("btn-success");
                }
            }
        };

        function buttonClickSwith(value) {
            if (!socket || socket.readyState !== WebSocket.OPEN) {
                console.log("socket not connected");
            }
            socket.send(JSON.stringify({ "Command": "SWITCH_GPIO", "Args": value.toString() }));
        }

        function buttonClickOn() {
            if (!socket || socket.readyState !== WebSocket.OPEN) {
                console.log("socket not connected");
            }
            socket.send(JSON.stringify({ "Command": "ON_GPIO", "Args": "5" }));
        }

        function buttonClickOff() {
            if (!socket || socket.readyState !== WebSocket.OPEN) {
                console.log("socket not connected");
            }
            socket.send(JSON.stringify({ "Command": "Off_GPIO", "Args": "5" }));
        }

        function updateState() {

            if (!socket) {
                disable();
            } else {
                switch (socket.readyState) {
                    case WebSocket.CLOSED:
                        console.log("Closed");
                        break;
                    case WebSocket.CLOSING:
                        console.log("Closing");
                        break;
                    case WebSocket.CONNECTING:
                        console.log("Connecting...");
                        break;
                    case WebSocket.OPEN:
                        console.log("Connection open");
                        socket.send(JSON.stringify({ "Command": "REGISTER_WEB_BROWSER" }));
                        break;
                    default:
                        console.log("Unknown WebSocket State: " + htmlEscape(socket.readyState));
                        break;
                }
            }
        }

        //sendButton.onclick = function () {
        //    var data = sendMessage.value;
        //    socket.send(data);
        //    commsLog.innerHTML += '<tr>' +
        //        '<td class="commslog-client">Client</td>' +
        //        '<td class="commslog-server">Server</td>' +
        //        '<td class="commslog-data">' + htmlEscape(data) + '</td></tr>';
        //};

        function htmlEscape(str) {
            return str.toString()
                .replace(/&/g, '&amp;')
                .replace(/"/g, '&quot;')
                .replace(/'/g, '&#39;')
                .replace(/</g, '&lt;')
                .replace(/>/g, '&gt;');
        }
    </script>
</body>
</html>


@*@{
    ViewData["Title"] = "Home Page";
    Layout = null;
}

<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <title></title>
    <style>
        table {
            border: 0
        }

        .commslog-data {
            font-family: Consolas, Courier New, Courier, monospace;
        }

        .commslog-server {
            background-color: red;
            color: white
        }

        .commslog-client {
            background-color: green;
            color: white
        }
    </style>
</head>
<body>
    <h1>WebSocket Sample Application</h1>
    <p id="stateLabel">Ready to connect...</p>
    <div>
        <label for="connectionUrl">WebSocket Server URL:</label>
        <input id="connectionUrl" />
        <button id="connectButton" type="submit">Connect</button>
    </div>
    <p></p>
    <div>
        <label for="sendMessage">Message to send:</label>
        <input id="sendMessage" disabled />
        <button id="sendButton" type="submit" disabled>Send</button>
        <button id="closeButton" disabled>Close Socket</button>
    </div>

    <h2>Communication Log</h2>
    <table style="width: 800px">
        <thead>
            <tr>
                <td style="width: 100px">From</td>
                <td style="width: 100px">To</td>
                <td>Data</td>
            </tr>
        </thead>
        <tbody id="commsLog">
        </tbody>
    </table>

    <script>
        var connectionUrl = document.getElementById("connectionUrl");
        var connectButton = document.getElementById("connectButton");
        var stateLabel = document.getElementById("stateLabel");
        var sendMessage = document.getElementById("sendMessage");
        var sendButton = document.getElementById("sendButton");
        var commsLog = document.getElementById("commsLog");
        var closeButton = document.getElementById("closeButton");
        var socket;

        var scheme = document.location.protocol === "https:" ? "wss" : "ws";
        var port = document.location.port ? (":" + document.location.port) : "";

        connectionUrl.value = scheme + "://" + document.location.hostname + port + "/ws" ;

        function updateState() {
            function disable() {
                sendMessage.disabled = true;
                sendButton.disabled = true;
                closeButton.disabled = true;
            }
            function enable() {
                sendMessage.disabled = false;
                sendButton.disabled = false;
                closeButton.disabled = false;
            }

            connectionUrl.disabled = true;
            connectButton.disabled = true;

            if (!socket) {
                disable();
            } else {
                switch (socket.readyState) {
                    case WebSocket.CLOSED:
                        stateLabel.innerHTML = "Closed";
                        disable();
                        connectionUrl.disabled = false;
                        connectButton.disabled = false;
                        break;
                    case WebSocket.CLOSING:
                        stateLabel.innerHTML = "Closing...";
                        disable();
                        break;
                    case WebSocket.CONNECTING:
                        stateLabel.innerHTML = "Connecting...";
                        disable();
                        break;
                    case WebSocket.OPEN:
                        stateLabel.innerHTML = "Open";
                        enable();
                        break;
                    default:
                        stateLabel.innerHTML = "Unknown WebSocket State: " + htmlEscape(socket.readyState);
                        disable();
                        break;
                }
            }
        }

        closeButton.onclick = function () {
            if (!socket || socket.readyState !== WebSocket.OPEN) {
                alert("socket not connected");
            }
            socket.close(1000, "Closing from client");
        };

        sendButton.onclick = function () {
            if (!socket || socket.readyState !== WebSocket.OPEN) {
                alert("socket not connected");
            }
            var data = sendMessage.value;
            socket.send(data);
            commsLog.innerHTML += '<tr>' +
                '<td class="commslog-client">Client</td>' +
                '<td class="commslog-server">Server</td>' +
                '<td class="commslog-data">' + htmlEscape(data) + '</td></tr>';
        };

        connectButton.onclick = function() {
            stateLabel.innerHTML = "Connecting";
            socket = new WebSocket(connectionUrl.value);
            socket.onopen = function (event) {
                updateState();
                commsLog.innerHTML += '<tr>' +
                    '<td colspan="3" class="commslog-data">Connection opened</td>' +
                '</tr>';
            };
            socket.onclose = function (event) {
                updateState();
                commsLog.innerHTML += '<tr>' +
                    '<td colspan="3" class="commslog-data">Connection closed. Code: ' + htmlEscape(event.code) + '. Reason: ' + htmlEscape(event.reason) + '</td>' +
                '</tr>';
            };
            socket.onerror = updateState;
            socket.onmessage = function (event) {
                commsLog.innerHTML += '<tr>' +
                    '<td class="commslog-server">Server</td>' +
                    '<td class="commslog-client">Client</td>' +
                    '<td class="commslog-data">' + htmlEscape(event.data) + '</td></tr>';
            };
        };

        function htmlEscape(str) {
            return str.toString()
                .replace(/&/g, '&amp;')
                .replace(/"/g, '&quot;')
                .replace(/'/g, '&#39;')
                .replace(/</g, '&lt;')
                .replace(/>/g, '&gt;');
        }
    </script>
</body>
</html>*@